#!/usr/bin/env python

# list of packages that should be imported for this code to work
import urllib3
import cobra.mit.access
import cobra.mit.request
import cobra.mit.session
import cobra.model.cdp
import cobra.model.config
import cobra.model.dhcp
import cobra.model.fabric
import cobra.model.fvns
import cobra.model.infra
import cobra.model.lacp
import cobra.model.lldp
import cobra.model.phys
import cobra.model.pol
import sys
from cobra.internal.codec.xmlcodec import toXMLStr

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

try:
    from credentials import APIC_IP, APIC_ADMIN, APIC_PASSWORD
except ImportError:
    sys.exit("Error: please verify credentials file format.")

# log into an APIC and create a directory object
ls = cobra.mit.session.LoginSession(APIC_IP, APIC_ADMIN, APIC_PASSWORD)
md = cobra.mit.access.MoDirectory(ls)
md.login()

# the top level object on which operations will be made
topMo = cobra.model.pol.Uni('')

# build the request using cobra syntax
fabricInst = cobra.model.fabric.Inst(topMo)
fabricProtPol = cobra.model.fabric.ProtPol(fabricInst, name='default', pairT='explicit')
fabricExplicitGEp = cobra.model.fabric.ExplicitGEp(fabricProtPol, name='VPC_DOM_101_102', id='1')
fabricRsVpcInstPol = cobra.model.fabric.RsVpcInstPol(fabricExplicitGEp, tnVpcInstPolName='default')
fabricNodePEp = cobra.model.fabric.NodePEp(fabricExplicitGEp, id='102', podId='1')
fabricNodePEp2 = cobra.model.fabric.NodePEp(fabricExplicitGEp, id='101', podId='1')
configExportP = cobra.model.config.ExportP(fabricInst, name='defaultOneTime', descr='POST PhysConn Complete', format='json', adminSt='untriggered', maxSnapshotCount='global-limit', snapshot='yes', includeSecureFields='yes')
infraInfra = cobra.model.infra.Infra(topMo)
infraFuncP = cobra.model.infra.FuncP(infraInfra, name='default')
infraAccPortGrp = cobra.model.infra.AccPortGrp(infraFuncP, name='SOLO_PORT_POLICY')
infraRsQosSdIfPol = cobra.model.infra.RsQosSdIfPol(infraAccPortGrp)
infraRsAttEntP = cobra.model.infra.RsAttEntP(infraAccPortGrp, tDn='uni/infra/attentp-SOLO_PORTS_AAEP')
infraRsPoeIfPol = cobra.model.infra.RsPoeIfPol(infraAccPortGrp)
infraRsMcpIfPol = cobra.model.infra.RsMcpIfPol(infraAccPortGrp)
infraRsMonIfInfraPol = cobra.model.infra.RsMonIfInfraPol(infraAccPortGrp)
infraRsQosEgressDppIfPol = cobra.model.infra.RsQosEgressDppIfPol(infraAccPortGrp)
infraRsStormctrlIfPol = cobra.model.infra.RsStormctrlIfPol(infraAccPortGrp)
infraRsMacsecIfPol = cobra.model.infra.RsMacsecIfPol(infraAccPortGrp)
infraRsQosIngressDppIfPol = cobra.model.infra.RsQosIngressDppIfPol(infraAccPortGrp)
infraRsStpIfPol = cobra.model.infra.RsStpIfPol(infraAccPortGrp)
infraRsCdpIfPol = cobra.model.infra.RsCdpIfPol(infraAccPortGrp, tnCdpIfPolName='CDP_ON')
infraRsL2PortAuthPol = cobra.model.infra.RsL2PortAuthPol(infraAccPortGrp)
infraRsL2PortSecurityPol = cobra.model.infra.RsL2PortSecurityPol(infraAccPortGrp)
infraRsHIfPol = cobra.model.infra.RsHIfPol(infraAccPortGrp)
infraRsQosPfcIfPol = cobra.model.infra.RsQosPfcIfPol(infraAccPortGrp)
infraRsLldpIfPol = cobra.model.infra.RsLldpIfPol(infraAccPortGrp, tnLldpIfPolName='LLDP_OFF')
infraRsFcIfPol = cobra.model.infra.RsFcIfPol(infraAccPortGrp)
infraRsDwdmIfPol = cobra.model.infra.RsDwdmIfPol(infraAccPortGrp)
infraRsCoppIfPol = cobra.model.infra.RsCoppIfPol(infraAccPortGrp)
infraRsQosDppIfPol = cobra.model.infra.RsQosDppIfPol(infraAccPortGrp)
infraRsL2IfPol = cobra.model.infra.RsL2IfPol(infraAccPortGrp)
infraAccBndlGrp = cobra.model.infra.AccBndlGrp(infraFuncP, lagT='link', name='BASIC_PORT_CHANNEL')
infraRsCdpIfPol2 = cobra.model.infra.RsCdpIfPol(infraAccBndlGrp, tnCdpIfPolName='CDP_ON')
infraRsQosSdIfPol2 = cobra.model.infra.RsQosSdIfPol(infraAccBndlGrp)
infraRsAttEntP2 = cobra.model.infra.RsAttEntP(infraAccBndlGrp, tDn='uni/infra/attentp-HYPERV_AAEP')
infraRsMcpIfPol2 = cobra.model.infra.RsMcpIfPol(infraAccBndlGrp)
infraRsMonIfInfraPol2 = cobra.model.infra.RsMonIfInfraPol(infraAccBndlGrp)
infraRsQosEgressDppIfPol2 = cobra.model.infra.RsQosEgressDppIfPol(infraAccBndlGrp)
infraRsStormctrlIfPol2 = cobra.model.infra.RsStormctrlIfPol(infraAccBndlGrp)
infraRsMacsecIfPol2 = cobra.model.infra.RsMacsecIfPol(infraAccBndlGrp)
infraRsQosIngressDppIfPol2 = cobra.model.infra.RsQosIngressDppIfPol(infraAccBndlGrp)
infraRsStpIfPol2 = cobra.model.infra.RsStpIfPol(infraAccBndlGrp)
infraRsLldpIfPol2 = cobra.model.infra.RsLldpIfPol(infraAccBndlGrp, tnLldpIfPolName='LLDP_OFF')
infraRsFcIfPol2 = cobra.model.infra.RsFcIfPol(infraAccBndlGrp)
infraRsLacpPol = cobra.model.infra.RsLacpPol(infraAccBndlGrp, tnLacpLagPolName='LACP_ACTIVE')
infraRsL2PortAuthPol2 = cobra.model.infra.RsL2PortAuthPol(infraAccBndlGrp)
infraRsQosPfcIfPol2 = cobra.model.infra.RsQosPfcIfPol(infraAccBndlGrp)
infraRsL2PortSecurityPol2 = cobra.model.infra.RsL2PortSecurityPol(infraAccBndlGrp)
infraRsHIfPol2 = cobra.model.infra.RsHIfPol(infraAccBndlGrp)
infraRsCoppIfPol2 = cobra.model.infra.RsCoppIfPol(infraAccBndlGrp)
infraRsQosDppIfPol2 = cobra.model.infra.RsQosDppIfPol(infraAccBndlGrp)
infraRsL2IfPol2 = cobra.model.infra.RsL2IfPol(infraAccBndlGrp)
infraAccBndlGrp2 = cobra.model.infra.AccBndlGrp(infraFuncP, lagT='node', name='VPC_B')
infraRsCdpIfPol3 = cobra.model.infra.RsCdpIfPol(infraAccBndlGrp2, tnCdpIfPolName='CDP_ON')
infraRsQosSdIfPol3 = cobra.model.infra.RsQosSdIfPol(infraAccBndlGrp2)
infraRsAttEntP3 = cobra.model.infra.RsAttEntP(infraAccBndlGrp2, tDn='uni/infra/attentp-MINI_AAEP')
infraRsMcpIfPol3 = cobra.model.infra.RsMcpIfPol(infraAccBndlGrp2)
infraRsMonIfInfraPol3 = cobra.model.infra.RsMonIfInfraPol(infraAccBndlGrp2)
infraRsQosEgressDppIfPol3 = cobra.model.infra.RsQosEgressDppIfPol(infraAccBndlGrp2)
infraRsStormctrlIfPol3 = cobra.model.infra.RsStormctrlIfPol(infraAccBndlGrp2)
infraRsMacsecIfPol3 = cobra.model.infra.RsMacsecIfPol(infraAccBndlGrp2)
infraRsQosIngressDppIfPol3 = cobra.model.infra.RsQosIngressDppIfPol(infraAccBndlGrp2)
infraRsStpIfPol3 = cobra.model.infra.RsStpIfPol(infraAccBndlGrp2)
infraRsLldpIfPol3 = cobra.model.infra.RsLldpIfPol(infraAccBndlGrp2, tnLldpIfPolName='LLDP_OFF')
infraRsFcIfPol3 = cobra.model.infra.RsFcIfPol(infraAccBndlGrp2)
infraRsLacpPol2 = cobra.model.infra.RsLacpPol(infraAccBndlGrp2, tnLacpLagPolName='LACP_ACTIVE')
infraRsL2PortAuthPol3 = cobra.model.infra.RsL2PortAuthPol(infraAccBndlGrp2)
infraRsQosPfcIfPol3 = cobra.model.infra.RsQosPfcIfPol(infraAccBndlGrp2)
infraRsL2PortSecurityPol3 = cobra.model.infra.RsL2PortSecurityPol(infraAccBndlGrp2)
infraRsHIfPol3 = cobra.model.infra.RsHIfPol(infraAccBndlGrp2)
infraRsCoppIfPol3 = cobra.model.infra.RsCoppIfPol(infraAccBndlGrp2)
infraRsQosDppIfPol3 = cobra.model.infra.RsQosDppIfPol(infraAccBndlGrp2)
infraRsL2IfPol3 = cobra.model.infra.RsL2IfPol(infraAccBndlGrp2)
infraAccBndlGrp3 = cobra.model.infra.AccBndlGrp(infraFuncP, lagT='node', name='VPC_A')
infraRsCdpIfPol4 = cobra.model.infra.RsCdpIfPol(infraAccBndlGrp3, tnCdpIfPolName='CDP_ON')
infraRsQosSdIfPol4 = cobra.model.infra.RsQosSdIfPol(infraAccBndlGrp3)
infraRsAttEntP4 = cobra.model.infra.RsAttEntP(infraAccBndlGrp3, tDn='uni/infra/attentp-MINI_AAEP')
infraRsMcpIfPol4 = cobra.model.infra.RsMcpIfPol(infraAccBndlGrp3)
infraRsMonIfInfraPol4 = cobra.model.infra.RsMonIfInfraPol(infraAccBndlGrp3)
infraRsQosEgressDppIfPol4 = cobra.model.infra.RsQosEgressDppIfPol(infraAccBndlGrp3)
infraRsStormctrlIfPol4 = cobra.model.infra.RsStormctrlIfPol(infraAccBndlGrp3)
infraRsMacsecIfPol4 = cobra.model.infra.RsMacsecIfPol(infraAccBndlGrp3)
infraRsQosIngressDppIfPol4 = cobra.model.infra.RsQosIngressDppIfPol(infraAccBndlGrp3)
infraRsStpIfPol4 = cobra.model.infra.RsStpIfPol(infraAccBndlGrp3)
infraRsLldpIfPol4 = cobra.model.infra.RsLldpIfPol(infraAccBndlGrp3, tnLldpIfPolName='LLDP_OFF')
infraRsFcIfPol4 = cobra.model.infra.RsFcIfPol(infraAccBndlGrp3)
infraRsLacpPol3 = cobra.model.infra.RsLacpPol(infraAccBndlGrp3, tnLacpLagPolName='LACP_ACTIVE')
infraRsL2PortAuthPol4 = cobra.model.infra.RsL2PortAuthPol(infraAccBndlGrp3)
infraRsQosPfcIfPol4 = cobra.model.infra.RsQosPfcIfPol(infraAccBndlGrp3)
infraRsL2PortSecurityPol4 = cobra.model.infra.RsL2PortSecurityPol(infraAccBndlGrp3)
infraRsHIfPol4 = cobra.model.infra.RsHIfPol(infraAccBndlGrp3)
infraRsCoppIfPol4 = cobra.model.infra.RsCoppIfPol(infraAccBndlGrp3)
infraRsQosDppIfPol4 = cobra.model.infra.RsQosDppIfPol(infraAccBndlGrp3)
infraRsL2IfPol4 = cobra.model.infra.RsL2IfPol(infraAccBndlGrp3)
cdpIfPol = cobra.model.cdp.IfPol(infraInfra, name='CDP_OFF', adminSt='disabled')
cdpIfPol2 = cobra.model.cdp.IfPol(infraInfra, name='CDP_ON', adminSt='enabled')
infraAttEntityP = cobra.model.infra.AttEntityP(infraInfra, name='HYPERV_AAEP')
infraProvAcc = cobra.model.infra.ProvAcc(infraAttEntityP, name='provacc')
infraRsFuncToEpg = cobra.model.infra.RsFuncToEpg(infraProvAcc, tDn='uni/tn-infra/ap-access/epg-default', primaryEncap='unknown', instrImedcy='lazy', mode='regular', encap='vlan-3456')
dhcpInfraProvP = cobra.model.dhcp.InfraProvP(infraProvAcc, mode='controller')
infraAttEntityP2 = cobra.model.infra.AttEntityP(infraInfra, name='SOLO_PORTS_AAEP')
infraRsDomP = cobra.model.infra.RsDomP(infraAttEntityP2, tDn='uni/phys-N5K_PHYSDOM')
infraProvAcc2 = cobra.model.infra.ProvAcc(infraAttEntityP2, name='provacc')
infraRsFuncToEpg2 = cobra.model.infra.RsFuncToEpg(infraProvAcc2, tDn='uni/tn-infra/ap-access/epg-default', primaryEncap='unknown', instrImedcy='lazy', mode='regular', encap='vlan-3456')
dhcpInfraProvP2 = cobra.model.dhcp.InfraProvP(infraProvAcc2, mode='controller')
infraAttEntityP3 = cobra.model.infra.AttEntityP(infraInfra, name='MINI_AAEP')
infraProvAcc3 = cobra.model.infra.ProvAcc(infraAttEntityP3, name='provacc')
infraRsFuncToEpg3 = cobra.model.infra.RsFuncToEpg(infraProvAcc3, tDn='uni/tn-infra/ap-access/epg-default', primaryEncap='unknown', instrImedcy='lazy', mode='regular', encap='vlan-3456')
dhcpInfraProvP3 = cobra.model.dhcp.InfraProvP(infraProvAcc3, mode='controller')
infraNodeP = cobra.model.infra.NodeP(infraInfra, name='VPC101_102')
infraRsAccPortP = cobra.model.infra.RsAccPortP(infraNodeP, tDn='uni/infra/accportprof-VPC_MINI_B')
infraRsAccPortP2 = cobra.model.infra.RsAccPortP(infraNodeP, tDn='uni/infra/accportprof-VPC_MINI_A')
infraLeafS = cobra.model.infra.LeafS(infraNodeP, type='range', name='N101-102')
infraNodeBlk = cobra.model.infra.NodeBlk(infraLeafS, from_='101', name='40cfafddb4346c1c', to_='102')
infraNodeP2 = cobra.model.infra.NodeP(infraInfra, name='LEAF102')
infraLeafS2 = cobra.model.infra.LeafS(infraNodeP2, type='range', name='N102')
infraNodeBlk2 = cobra.model.infra.NodeBlk(infraLeafS2, from_='102', name='301546ddf215d9a3', to_='102')
infraNodeP3 = cobra.model.infra.NodeP(infraInfra, name='LEAF103')
infraRsAccPortP3 = cobra.model.infra.RsAccPortP(infraNodeP3, tDn='uni/infra/accportprof-FREENAS')
infraRsAccPortP4 = cobra.model.infra.RsAccPortP(infraNodeP3, tDn='uni/infra/accportprof-N5K_EXTERNAL')
infraLeafS3 = cobra.model.infra.LeafS(infraNodeP3, type='range', name='N103')
infraNodeBlk3 = cobra.model.infra.NodeBlk(infraLeafS3, from_='103', name='2c2e14b0577da6c5', to_='103')
infraNodeP4 = cobra.model.infra.NodeP(infraInfra, name='LEAF101')
infraRsAccPortP5 = cobra.model.infra.RsAccPortP(infraNodeP4, tDn='uni/infra/accportprof-ASA_GATEWAY')
infraLeafS4 = cobra.model.infra.LeafS(infraNodeP4, type='range', name='N101')
infraNodeBlk4 = cobra.model.infra.NodeBlk(infraLeafS4, from_='101', name='e4f05d60744b3795', to_='101')
lldpIfPol = cobra.model.lldp.IfPol(infraInfra, adminRxSt='disabled', name='LLDP_OFF', adminTxSt='disabled')
lldpIfPol2 = cobra.model.lldp.IfPol(infraInfra, adminRxSt='enabled', name='LLDP_ON', adminTxSt='enabled')
infraAccPortP = cobra.model.infra.AccPortP(infraInfra, name='ESX108')
infraHPortS = cobra.model.infra.HPortS(infraAccPortP, type='range', name='ETH1_17')
infraRsAccBaseGrp = cobra.model.infra.RsAccBaseGrp(infraHPortS, fexId='101', tDn='uni/infra/funcprof/accportgrp-SOLO_PORT_POLICY')
infraPortBlk = cobra.model.infra.PortBlk(infraHPortS, name='block2', fromPort='17', fromCard='1', toPort='17', toCard='1')
infraAccPortP2 = cobra.model.infra.AccPortP(infraInfra, name='N5K_EXTERNAL')
infraHPortS2 = cobra.model.infra.HPortS(infraAccPortP2, type='range', name='ETH1_1')
infraRsAccBaseGrp2 = cobra.model.infra.RsAccBaseGrp(infraHPortS2, fexId='101', tDn='uni/infra/funcprof/accportgrp-SOLO_PORT_POLICY')
infraPortBlk2 = cobra.model.infra.PortBlk(infraHPortS2, name='block2', fromPort='1', fromCard='1', toPort='1', toCard='1')
infraAccPortP3 = cobra.model.infra.AccPortP(infraInfra, name='FREENAS')
infraHPortS3 = cobra.model.infra.HPortS(infraAccPortP3, type='range', name='ETH1_2')
infraRsAccBaseGrp3 = cobra.model.infra.RsAccBaseGrp(infraHPortS3, fexId='101', tDn='uni/infra/funcprof/accportgrp-SOLO_PORT_POLICY')
infraPortBlk3 = cobra.model.infra.PortBlk(infraHPortS3, name='block2', fromPort='2', fromCard='1', toPort='2', toCard='1')
infraAccPortP4 = cobra.model.infra.AccPortP(infraInfra, name='ASA_GATEWAY')
infraHPortS4 = cobra.model.infra.HPortS(infraAccPortP4, type='range', name='ETH1_19')
infraRsAccBaseGrp4 = cobra.model.infra.RsAccBaseGrp(infraHPortS4, fexId='101', tDn='uni/infra/funcprof/accportgrp-SOLO_PORT_POLICY')
infraPortBlk4 = cobra.model.infra.PortBlk(infraHPortS4, name='block2', fromPort='19', fromCard='1', toPort='19', toCard='1')
infraAccPortP5 = cobra.model.infra.AccPortP(infraInfra, name='STD_PORTCHANNEL', descr='Standard port Channel to one leaf')
infraHPortS5 = cobra.model.infra.HPortS(infraAccPortP5, type='range', name='HYPERV_INTS', descr='Interfaces on HyperV Servers for standard port channel')
infraRsAccBaseGrp5 = cobra.model.infra.RsAccBaseGrp(infraHPortS5, fexId='101', tDn='uni/infra/funcprof/accbundle-BASIC_PORT_CHANNEL')
infraPortBlk5 = cobra.model.infra.PortBlk(infraHPortS5, name='block2', fromPort='45', fromCard='1', toPort='46', toCard='1')
infraAccPortP6 = cobra.model.infra.AccPortP(infraInfra, name='VPC_MINI_B')
infraHPortS6 = cobra.model.infra.HPortS(infraAccPortP6, type='range', name='ETH1_18')
infraRsAccBaseGrp6 = cobra.model.infra.RsAccBaseGrp(infraHPortS6, fexId='101', tDn='uni/infra/funcprof/accbundle-VPC_B')
infraPortBlk6 = cobra.model.infra.PortBlk(infraHPortS6, name='block2', fromPort='18', fromCard='1', toPort='18', toCard='1')
infraAccPortP7 = cobra.model.infra.AccPortP(infraInfra, name='VPC_MINI_A')
infraHPortS7 = cobra.model.infra.HPortS(infraAccPortP7, type='range', name='ETH1_17')
infraRsAccBaseGrp7 = cobra.model.infra.RsAccBaseGrp(infraHPortS7, fexId='101', tDn='uni/infra/funcprof/accbundle-VPC_A')
infraPortBlk7 = cobra.model.infra.PortBlk(infraHPortS7, name='block2', fromPort='17', fromCard='1', toPort='17', toCard='1')
lacpLagPol = cobra.model.lacp.LagPol(infraInfra, name='MAC_PIN', minLinks='1', ctrl='fast-sel-hot-stdby,graceful-conv,susp-individual', maxLinks='16', mode='mac-pin')
lacpLagPol2 = cobra.model.lacp.LagPol(infraInfra, name='LACP_ACTIVE', minLinks='1', ctrl='fast-sel-hot-stdby,graceful-conv,susp-individual', maxLinks='16', mode='active')
fvnsVlanInstP = cobra.model.fvns.VlanInstP(infraInfra, name='N5K_VLANS', allocMode='static')
fvnsEncapBlk = cobra.model.fvns.EncapBlk(fvnsVlanInstP, to='vlan-333', role='external', from_='vlan-333', allocMode='inherit')
fvnsEncapBlk2 = cobra.model.fvns.EncapBlk(fvnsVlanInstP, to='vlan-100', role='external', from_='vlan-100', allocMode='inherit')
fvnsVlanInstP2 = cobra.model.fvns.VlanInstP(infraInfra, name='HYPERV_VLANS', allocMode='dynamic')
fvnsEncapBlk3 = cobra.model.fvns.EncapBlk(fvnsVlanInstP2, to='vlan-820', role='external', from_='vlan-800', allocMode='inherit')
fvnsVlanInstP3 = cobra.model.fvns.VlanInstP(infraInfra, name='ESX_VLANS', allocMode='dynamic')
fvnsEncapBlk4 = cobra.model.fvns.EncapBlk(fvnsVlanInstP3, to='vlan-100', role='external', from_='vlan-99', allocMode='static')
fvnsEncapBlk5 = cobra.model.fvns.EncapBlk(fvnsVlanInstP3, to='vlan-940', role='external', from_='vlan-900', allocMode='inherit')
physDomP = cobra.model.phys.DomP(topMo, name='N5K_PHYSDOM')
infraRsVlanNs = cobra.model.infra.RsVlanNs(physDomP, tDn='uni/infra/vlanns-[N5K_VLANS]-static')


# commit the generated code to APIC
c = cobra.mit.request.ConfigRequest()
c.addMo(topMo)
md.commit(c)

